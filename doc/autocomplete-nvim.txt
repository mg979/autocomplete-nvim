*autocomplete-nvim.txt*
A async completion framework aims to provide completion to neovim's built in
LSP written in Lua


CONTENTS                                                   *autocomplete-nvim*

    1. Introduction ............... |autocomplete-introduction|
    2. Features ................... |autocomplete-feature|
    3. Prerequisite ............... |autocomplete-prerequisite|
    4. Setup ...................... |autocomplete-setup|
    5. Options .................... |autocomplete-options|
    6. Buffer-local options ....... |autocomplete-buffer-options|



==============================================================================
INTRODUCTION                                       *autocomplete-introdction*

autocomplete-nvim is an auto completion framework that aims to provide
a better completion experience with neovim's built-in LSP.  Other LSP
functionality is not supported.



==============================================================================
FEATURES                                               *autocomplete-features*

- Asynchronous completion using libuv api.
- Automatically open hover windows when popupmenu is available.
- Automatically open signature help if it's available.
- Snippets integration with UltiSnips and Neosnippet and vim-vsnip.
- ins-completion method integration
- Apply additionalTextEdits in LSP spec if it's available.
- Chain completion support inspired by vim-mucomplete



==============================================================================
PREREQUISITES                                     *autocomplete-prerequisites*

- Neovim 5.0
- |nvim-lsp| if you want to take advantage the LSP completions



==============================================================================
SETUP                                                     *autocomplete-setup*

- autocomplete-nvim requires several autocommands set up to work properly, you
  should set it up using the `on_attach` function like this.
>
  lua require'nvim_lsp'.pyls.setup{on_attach=require'autocomplete'.on_attach}
<
  (change `pyls` to whichever language server you are using)

- If you want autocomplete-nvim to be set up for all buffers instead of only
  being used when lsp is enabled, call the `on_attach` function directly:
>
  " Use autocomplete-nvim in every buffer
  autocmd BufEnter * lua require'autocomplete'.on_attach()
<
  Note: It's okay to set up autocomplete-nvim without lsp. It will simply
  use another completion source instead(Ex: snippets).



==============================================================================
OPTIONS                                                 *autocomplete-options*


- - - - - - - - - - - - - - - - - - - - - - - - - *g:autocomplete.auto_popup*

    This variable enable automatically popup window for completion. Set
    this value to 0 if you don't want automatically popup window.

    If you disable auto popup menu, you can manually trigger completion:
>
    imap <Tab> <Plug>(Autocomplete)
<
    default value: 1


- - - - - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.snippets*

    You can specify which snippet engines you want to use. Possible values
    are |UltiSnips|, |Neosnippet| and |vim-vsnip|.

    Note: Snippets will not be expanded without setting this variables.

    default value: ""


- - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.auto_signature*

    By default signature help opens automatically whenever it is availabe.

    default value: 1


- - - - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.auto_hover*

    autocomplete-nvim can automatically open a hover window when you navigate
    through the complete items(including basic information of snippets).

    default value: 0


- - - - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.auto_paren*

    Enable the auto insert parenthesis feature. autocomplete-nvim will
    insert parenthesis when completing methods or functions.

    default value: 0


- - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.trigger_length*

    You can specify keyword length for triggering completion, if the current
    word is less than keyword length, completion won't be triggered.

    Note: autocomplete-nvim will ignore keyword length if you're on trigger
    character.

    default value: 2


- - - - - - - - - - - - - - - - - - - - - - - - - *g:autocomplete.confirm_key*

    You can specify a key to use to confirm completion (which will select
    the completion items and expand snippets if possible).

    Note: Make sure to escape special keys:
>
    let g:autocomplete.confirm_key = "\<C-y>"
<
    default value: ""


- - - - - - - - - - - - - - - - - - - - - - - - - *g:autocomplete.timer_cycle*

    autocomplete-nvim uses a timer to control the rate of completion.
    Adjust the timer rate by setting this value.

    Note: values lower than the default are not recommended.

    default value: 80


- - - - - - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.chains*

    autocomplete-nvim has chain completion support inspired by vim-mucomplete.
    In short, you can divide completion sources in groups and have an
    ins-completion method as backup completion. When a source fails to provide
    completion items, the next one in the chain is attempted, until some
    result is obtained, or all sources have been tried.

    You can specify different completion list for different filetypes. There
    are the following built-in completion sources:

    'lsp'       language-server protocol completion
    'snippet'   snippet sources based on g:autocomplete.snippets
    'path'      path completion relative to the current file.

    You can also include the regular |ins-completion| sources. You can group
    non-|ins-completion| sources in a list, in this case they will be merged
    in the same popup.For example:
>
    let g:autocomplete.chains = {
        \ 'python' : [ 'path', ['lsp', 'snippet'], 'keyn' ],
        \ 'vim': [ 'path', 'keyn', 'c-p' ],
        \ 'lua': [ 'path', 'keyn', 'c-p' ],
        \}
<
    List of available |ins-completion| sources and their names/mappings:

    `Whole lines`                                       'line'    <c-x><c-l>
    `keywords in the current file`                      'keyn'    <c-x><c-n>
    `keywords in the current file (reversed)`           'keyp'    <c-x><c-p>
    `keywords in 'dictionary'`                          'dict'    <c-x><c-k>
    `keywords in 'thesaurus'`                           'thes'    <c-x><c-t>
    `keywords in the current and included files`        'incl'    <c-x><c-i>
    `tags`                                              'tags'    <c-x><c-]>
    `file names`                                        'file'    <c-x><c-f>
    `definitions or macros`                             'defs'    <c-x><c-d>
    `Vim command-line`                                  'cmd'     <c-x><c-v>
    `User defined completion`                           'user'    <c-x><c-u>
    `omni completion`                                   'omni'    <c-x><c-o>
    `Spelling suggestions`                              'spel'    <c-x>s
    `keywords in 'complete'`                            'c-n'     <c-n>
    `keywords in 'complete' (reversed)`                 'c-p'     <c-p>

    You can easily switch to next or previous sources by mapping keys in
    insert mode. For example, using <c-j> to switch to previous sources and
    <c-k> to switch to next sources:
>
    imap <c-j> <cmd>lua require'sources'.prevSource()<CR>
    imap <c-k> <cmd>lua require'sources'.nextSource()<CR>
<
    You can also have different chains for different 'scopes', and different
    filetypes. By 'scope' is meant the syntax group at cursor position. In
    this way you can have different completion lists in comments and function
    calls, strings, comments, etc. Such scope names are matched with regex:
>
    let g:autocomplete.chains = {
        \ 'lua': {
        \   'string':  [ 'keyn', 'c-p' ],
        \   'comment': [ 'keyn' ],
        \   'func':    ['lsp'],
        \   'default': [ ['lsp', 'snippet'], 'keyn' ],
        \ },
        \}
<
    Note: the 'default' key is special, it is used for unmatched groups but is
    not matched itself. If not present, the built-in default will be used.
    See |g:autocomplete.chains.default|.

    Note: You can check the syntax group under the cursor with this command:
>
    :echo synIDattr(synID(line('.'), col('.'), 1), "name")
<
- - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.chains.default*

    There is a 'default' chain that is used when an appropriate chain has not
    been defined by the user. It is actually a scoped chain:
>
    'default' : {
      'comment': [ 'keyn' ],
      'default': [ ['lsp', 'snippet'], 'path', 'keyn' ]
    }
<
    That is, it will only complete words from the current buffers when inside
    comments, and attempt several methods in other scopes.

    This 'default' chain is also used when scoped chains for the current
    filetype have been defined, but they don't match the current scope nor
    they contain a 'default' chain for unmatched syntax groups.

    You can redefine this 'default' chain but you obviously don't need to.
    If you do, it's better if you define it as a scoped chain, and you only
    need to set a default for the groups you're interested in. If it fails to
    match any, the built-in 'default' will still be used as a fallback.

    This won't happen if you define the 'default' key as a simple list!
>
    " don't do this
    let g:autocomplete.chains = {
        \ 'default' : [ ['lsp', 'snippet'], 'path', 'keyn' ],
        \}

    " this is better, as built-in default will still work
    let g:autocomplete.chains = {
        \ 'default' : { 'string': [ 'keyn' ] }
        \}
<


- - - - - - - - - - - - - - - - - - - - - - - - - -  *g:autocomplete.matching*

    There are three different kind of matching technique implement in
    autocomplete-nvim: 'substring', 'fuzzy' or 'exact'. You can specify a list
    of matching strategy, autocomplete-nvim will loop through the list and
    assign priority from high to low. For example
>
    let g:autocomplete.matching = ['exact', 'substring', 'fuzzy']
<
    default value: ['exact']


- - - - - - - - - - - - - - - - - - - - - - - - - *g:autocomplete.ignore_case*

    Enable ignore case matching in all matching strategy. For example
>
    let g:autocomplete.ignore_case = 1
<
    default value: 0


- - - - - - - - - - - - - - - - - - - - - - - - - - - *g:autocomplete.sorting*

    You can determine how you want to sort the completion items in popup menu.
    Possible values are 'alphabet', 'length', 'none'

    default value: 'alphabet'


==============================================================================
BUFFER-LOCAL OPTIONS                             *autocomplete-buffer-options*

These options should be set either in |ftplugin|s, or using |autocmd-groups|.
Example:
>
    augroup CompletionTriggers
        autocmd!
        autocmd BufEnter * let b:autocomplete_extra_triggers = ['.']
        autocmd BufEnter *.c,*.cpp let b:autocomplete_extra_triggers = ['.', '::']
    augroup end
<


- - - - - - - - - - - - - - - - - - - - - - - - - - - - *b:autocomplete_chain*

    It works as |g:autocomplete.chains|, but it's buffer-specific.
    It is preferred to the global value if it has been defined.


- - - - - - - - - - - - - - - - - - - - - - -  *b:autocomplete_extra_triggers*

    By setting this variable, you can add patterns that will trigger
    a completion. The variable can hold a list of patterns, or a dictionary
    with completion methods as keys, and patterns as values.

    Example with list:
>
    let b:autocomplete_extra_triggers = ['.', '::']
<
    Example with dictionary:
>
    let b:autocomplete_extra_triggers = {'lsp': ['.', '::'], 'default': ['.']}
<


==============================================================================
vim:tw=78:ts=8:ft=help:norl:et:fen:
